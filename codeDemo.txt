public class CustomSinglyLinkedList {
    private Node head;
    private Node tail;
    private int size;

     Node class
    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Constructor
    public CustomSinglyLinkedList() {
        this.head = null;
        this.tail = null;
        this.size = 0;
    }

    // Method to add an element at a specified position
    public void add(int data, int index) {
        if (index < 0) {
            return;
        }
        Node newNode = new Node(data);
        if (index == 0) {
            newNode.next = head;
            head = newNode;
            if (tail == null) {
                tail = newNode;
            }
        } else {
            Node current = head;
            for (int i = 0; i < index - 1; i++) {
                if (current == null) {
                    return;
                }
                current = current.next;
            }
            if (current == null) {
                return;
            }
            newNode.next = current.next;
            current.next = newNode;
            if (newNode.next == null) {
                tail = newNode;
            }
        }
        size++;
    }

     //Method to remove all occurrences of a specific element
    public void removeAll(int data) {
        while (head != null && head.data == data) {
            head = head.next;
            size--;
        }
        Node current = head;
        while (current != null && current.next != null) {
            if (current.next.data == data) {
                current.next = current.next.next;
                size--;
            } else {
                current = current.next;
            }
        }
        if (tail != null && tail.data == data) {
            tail = current;
        }
    }

     //Method to calculate the average of all elements
    public double avg() {
        if (size == 0) {
            return 0.0;
        }
        int sum = 0;
        Node current = head;
        while (current != null) {
            sum += current.data;
            current = current.next;
        }
        return (double) sum / size;
    }

    // Method to print the list in reverse order
    public void printReverse() {
        printReverseRecursive(head);
        System.out.println();
    }

    private void printReverseRecursive(Node node) {
        if (node == null) {
            return;
        }
        printReverseRecursive(node.next);
        System.out.print(node.data + " ");
    }

    // Method to print all elements in the list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
//<----------------------------------------------------------MAIN METHOD------------------------------------------------------------------------------------------
    // Main method to demonstrate functionality
    public static void main(String[] args) {
        CustomSinglyLinkedList list = new CustomSinglyLinkedList();
         try (Scanner scanner = new Scanner(System.in)) {
             SinglyLinkedList list = new SinglyLinkedList();
                boolean exit = false;

                while (!exit) {
                    try {
                        System.out.println("Menu:");
                        System.out.println("1. Add an element");
                        System.out.println("2. Remove all occurrences of an element");
                        System.out.println("3. Calculate average of elements");
                        System.out.println("4. Print list in reverse order");
                        System.out.println("5. Print list");
                        System.out.println("6. Exit");
                        System.out.print("Choose an option: ");
                        int choice = scanner.nextInt();

                        switch (choice) {
                            case 1:
                                System.out.print("Enter element to add: ");
                                int data = scanner.nextInt();
                                System.out.print("Enter position: ");
                                int index = scanner.nextInt();
                                try {
                                    list.add(data, index);
                                } catch (InvalidIndexException e) {
                                    System.out.println(e.getMessage());
                                }
                                break;
                            case 2:
                                System.out.print("Enter element to remove: ");
                                int removeData = scanner.nextInt();
                                list.removeAll(removeData);
                                break;
                            case 3:
                                try {
                                    System.out.println("Average: " + list.avg());
                                } catch (EmptyListException e) {
                                    System.out.println(e.getMessage());
                                }
                                break;
                            case 4:
                                try {
                                    System.out.print("List in reverse order: ");
                                    list.printReverse();
                                } catch (EmptyListException e) {
                                    System.out.println(e.getMessage());
                                }
                                break;
                            case 5:
                                list.printList();
                                break;
                            case 6:
                                exit = true;
                                break;
                            default:
                                System.out.println("Invalid choice. Please try again.");
                        }
                    } catch (Exception e) {
                        System.out.println("An error occurred: " + e.getMessage());
                    }
                }
            } catch (Exception e) {
                System.out.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
            }
            }